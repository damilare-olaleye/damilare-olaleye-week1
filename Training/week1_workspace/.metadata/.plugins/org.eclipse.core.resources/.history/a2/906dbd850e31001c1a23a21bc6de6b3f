package com.revature.model;

public class Bus {
	
	// These are known as fields
	// we know that they are fields because they are directly specified inside the class itself and not in a method
	
	// Fields are different than variables declared inside of a method in that they have default values
	// Default value for reference fields: null
	// Default value for number 0 (integral types) 0.0 (for floating point types)
	// Default value for boolean: false
	
	// (Non-static fields) are known as instance variables. They are properties scoped to individuals objects. Each object has its own copy of these properties
	// Ex. All humans have a copy of two properties: firstName and lastName
	public String type;  // default values of null
	public int numberOfWheels; // default values of 0
	public int year; // default values of null
	public String model; // default values of 0
	
	/*
	 * Constructors: subroutines that are similar to methods, except that they are invoked in order to actually create the object
	 * We can utilize constructors to populate the initial properties of an object
	 * 
	 * In order to define a constructor, we simply create what looks like a method, but with the name of the class
	 * 
	 * If we do not declare any constructor inside of our class, the Java compiler will automatically provide a constructor by default
	 * 
	 * This default constructor is known as the "default no-args constructor"
	 * 
	 * However, as soon as we define any sort of constructor (no mater the number of parameters it takes), it will NOT BE PROVIDED.
	 * 
	 * Constructors DO NOT have a return type (unlike methods)
	 */
	
	// This constructor has 0 parameters
	public Bus() {
		
	}
	
	// This constructor has 4 parameters
	public Bus(int numberOfWheels, int year, String model, String type) {
		// 'this' is referring to the object itself that we are creating
		// we want to set the properties of "this" object to the following values
		
		 this.numberOfWheels = numberOfWheels;
		 this.year = year;
		 this.model = model;
		 this.type = type;
		
	}
	
	/*
	 * Technical terminology aside: parameter v argument?
	 * 
	 * Arguments are what you send into a consturcor or method
	 * 
	 * Parameters are what you use inside of that constructor (or method)
	 */
}
